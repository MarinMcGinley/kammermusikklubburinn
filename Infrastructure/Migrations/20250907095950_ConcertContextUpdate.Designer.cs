// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ConcertContext))]
    [Migration("20250907095950_ConcertContextUpdate")]
    partial class ConcertContextUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Composer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("Core.Entities.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcertSeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConcertSeasonId");

                    b.ToTable("Concert");
                });

            modelBuilder.Entity("Core.Entities.ConcertSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConcertSeasons");
                });

            modelBuilder.Entity("Core.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Core.Entities.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("Core.Entities.PerformerInGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("PieceInConcertId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("PieceInConcertId");

                    b.ToTable("PerformerInGroup");
                });

            modelBuilder.Entity("Core.Entities.Piece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComposerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Core.Entities.PieceInConcert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PieceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("PieceId");

                    b.ToTable("PieceInConcert");
                });

            modelBuilder.Entity("Core.Entities.Concert", b =>
                {
                    b.HasOne("Core.Entities.ConcertSeason", "ConcertSeason")
                        .WithMany("Concerts")
                        .HasForeignKey("ConcertSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcertSeason");
                });

            modelBuilder.Entity("Core.Entities.PerformerInGroup", b =>
                {
                    b.HasOne("Core.Entities.Instrument", "Instrument")
                        .WithMany("PerformersInGroups")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Performer", "Performer")
                        .WithMany("PerformerInGroups")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PieceInConcert", "PieceInConcert")
                        .WithMany("PerformersInGroup")
                        .HasForeignKey("PieceInConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Performer");

                    b.Navigation("PieceInConcert");
                });

            modelBuilder.Entity("Core.Entities.Piece", b =>
                {
                    b.HasOne("Core.Entities.Composer", "Composer")
                        .WithMany("Pieces")
                        .HasForeignKey("ComposerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composer");
                });

            modelBuilder.Entity("Core.Entities.PieceInConcert", b =>
                {
                    b.HasOne("Core.Entities.Concert", "Concert")
                        .WithMany("PiecesInConcert")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Piece", "Piece")
                        .WithMany("PieceInConcerts")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");

                    b.Navigation("Piece");
                });

            modelBuilder.Entity("Core.Entities.Composer", b =>
                {
                    b.Navigation("Pieces");
                });

            modelBuilder.Entity("Core.Entities.Concert", b =>
                {
                    b.Navigation("PiecesInConcert");
                });

            modelBuilder.Entity("Core.Entities.ConcertSeason", b =>
                {
                    b.Navigation("Concerts");
                });

            modelBuilder.Entity("Core.Entities.Instrument", b =>
                {
                    b.Navigation("PerformersInGroups");
                });

            modelBuilder.Entity("Core.Entities.Performer", b =>
                {
                    b.Navigation("PerformerInGroups");
                });

            modelBuilder.Entity("Core.Entities.Piece", b =>
                {
                    b.Navigation("PieceInConcerts");
                });

            modelBuilder.Entity("Core.Entities.PieceInConcert", b =>
                {
                    b.Navigation("PerformersInGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
